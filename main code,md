# Student Exam Scores Analysis 🧑‍🎓

## Project Overview
This project involves loading, cleaning, and analyzing a dataset containing student performance metrics. The analysis focuses on data validation, feature engineering, and visualizing the relationship between factors like study hours, sleep, and attendance, and their impact on final exam scores. The final output includes both statistical summaries and interactive tools for data exploration.

---

## 📁 Project Files
* `student_exam_scores.ipynb` - The main Jupyter notebook containing all Python code and analysis steps.
* `student_exam_scores.csv` - The original raw dataset used for the analysis.
* `students_with_gender.csv` - The modified dataset exported after cleaning and feature engineering.
* `student_S[ID]_marksheet.pdf` - Example PDF marksheet generated by the interactive tool (saved for each student).

---

## 🛠️ Technologies Used
| Category | Tool | Purpose |
| :--- | :--- | :--- |
| **Language** | Python 3 | Core programming language. |
| **Data Analysis** | **Pandas** | Data manipulation, loading, and cleaning. |
| **Visualization** | **Matplotlib** | Creation of histograms, pie charts, and bar charts. |
| **Numerical Ops** | **NumPy** | Array handling and random data generation (`Gender`, `year_registered`). |
| **Interactivity** | **ipywidgets** | Creation of dynamic, interactive dashboard controls. |
| **Reporting** | **ReportLab** | Generating and exporting individual student PDF marksheets. |

---

## 📊 Dataset Structure

### Original Columns
| Column Name | Description |
| :--- | :--- |
| `student_id` | Unique identifier for each student. |
| `hours_studied` | Number of hours studied. |
| `sleep_hours` | Hours of sleep recorded. |
| `attendance_percent` | Student attendance percentage. |
| `previous_scores` | Scores from previous exams. |
| **`exam_score`** | **Current exam score (Target Variable).** |

### Derived/Engineered Columns
| Column Name | Description |
| :--- | :--- |
| `Average` | Mean of all numeric features (used for categorical binning). |
| `Range` | Categorical binning of `Average` (e.g., "70-79", "80-89"). |
| `Gender` | Randomly assigned 'Male' or 'Female' for demographic analysis. |
| `year_registered` | Randomly assigned year (2021-2024) for yearly trends. |
| **`adjusted_mark`** | `exam_score` adjusted by attendance policy: **+5%** for >=90% attendance, **-5%** for <70% attendance. |

---

## 🧑‍🏫 Code Commands & Documentation

This section provides the Python commands used in the notebook, along with descriptions for each step.

### 1. Data Setup & Cleaning
This initial phase sets up the environment and ensures data quality.

```python
# Import required libraries
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import ipywidgets as widgets
from IPython.display import display, clear_output
from google.colab import files
# Install ReportLab for PDF generation
!pip install reportlab
from reportlab.pdfgen import canvas 

# Load dataset
df = pd.read_csv("student_exam_scores.csv")

# Check for missing values (returns column-wise NaN counts)
print(df.isnull().sum())

# Convert all score columns to numeric, coercing any non-numeric text to NaN
for col in df.columns[1:]:
    df[col] = pd.to_numeric(df[col], errors='coerce')

# Display rows with newly introduced NaN values for inspection
print(df[df.isnull().any(axis=1)])
